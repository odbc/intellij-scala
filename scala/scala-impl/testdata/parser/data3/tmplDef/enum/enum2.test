object Collections {
    enum List[+T] {
        case Cons(head: T, tail: List[T])
        case Nil
    }
}
-----
ScalaFile
  ScObject: Collections
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Collections')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScEnum: List
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(enum)('enum')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('List')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('+')
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n        ')
              ScEnumCases: Cons
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ScEnumCase: Cons
                  PsiElement(identifier)('Cons')
                  PrimaryConstructor
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        ClassParameter: head
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(identifier)('head')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ClassParameter: tail
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(identifier)('tail')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            ParametrizedType: List[T]
                              SimpleType: List
                                CodeReferenceElement: List
                                  PsiElement(identifier)('List')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: T
                                  CodeReferenceElement: T
                                    PsiElement(identifier)('T')
                                PsiElement(])(']')
                        PsiElement())(')')
                  ExtendsBlock
                    <empty list>
              PsiWhiteSpace('\n        ')
              ScEnumCases: Nil
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ScEnumCase: Nil
                  PsiElement(identifier)('Nil')
                  ExtendsBlock
                    <empty list>
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
