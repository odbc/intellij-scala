--- SourceCode.scala
+++ SourceCode.scala
@@ -1,7 +1,9 @@
-package scala.quoted
-package runtime.impl.printers
+package org.jetbrains.plugins.scala.tasty
+
+// Copy of https://github.com/lampepfl/dotty/blob/3.0.0-RC3/compiler/src/scala/quoted/runtime/impl/printers/SourceCode.scala (with amendments)
 
 import scala.annotation.switch
+import scala.quoted._
 
 /** Printer for fully elaborated representation of the source code */
 object SourceCode {
@@ -64,10 +66,44 @@
     flagList.result().mkString("/*", " ", "*/")
   }
 
-  private class SourceCodePrinter[Q <: Quotes & Singleton](syntaxHighlight: SyntaxHighlight, fullNames: Boolean)(using val quotes: Q) {
+  class SourceCodePrinter[Q <: Quotes & Singleton](syntaxHighlight: SyntaxHighlight, fullNames: Boolean, rightHandSide: Boolean = true)(using val quotes: Q) {
     import syntaxHighlight._
     import quotes.reflect._
 
+    var references: Seq[ReferenceData] = Vector.empty
+
+    var types: Seq[TypeData] = Vector.empty
+
+    var sources: Seq[String] = Vector.empty
+
+    private def collectReference(position: Position, target: Position): Unit = {
+      // Skip references that are absent in original source file
+      if (position.start < position.end) {
+        if (target.sourceFile.toString != "<no file>") { // TODO
+          val targetFile = target.sourceFile.jpath.toFile
+          import org.jetbrains.plugins.scala.tasty.Position
+          references :+= ReferenceData(
+            Position(position.sourceFile.jpath.toFile.getPath, position.start, position.end),
+            Position(targetFile.getPath, target.start, target.end))
+        }
+      }
+    }
+
+    private def collectType(position: Position, length: Int, doPrintType: => Unit): Unit = {
+      // TODO Why do positions of val and def symbols have zero length?
+      // Skip types that are absent in original source file
+      if (position.start < position.end + length) {
+        val previousLength = sb.length()
+        doPrintType
+        val presentation = sb.substring(previousLength, sb.length())
+        sb.delete(previousLength, sb.length())
+        import org.jetbrains.plugins.scala.tasty.Position
+        types :+= TypeData(
+          Position(position.sourceFile.jpath.toFile.getPath, position.start, position.end + length),
+          presentation)
+      }
+    }
+
     private[this] val sb: StringBuilder = new StringBuilder
 
     private[this] var indent: Int = 0
@@ -187,6 +223,10 @@
             if (!args.isEmpty || needEmptyParens)
               inParens(printTrees(args, ", ")(using Some(cdef.symbol)))
           case Select(newTree: New, _) =>
+            if (rightHandSide) {
+              val tpt = newTree.tpt
+              tpt.symbol.pos.foreach(collectReference(tpt.pos, _)) // TODO Handle more complex cases
+            }
             printType(newTree.tpe)(using Some(cdef.symbol))
           case parent: Term =>
             throw new MatchError(parent.show(using Printer.TreeStructure))
@@ -282,10 +322,13 @@
         val name1 = splicedName(vdef.symbol).getOrElse(name)
         this += highlightValDef(name1) += ": "
         printTypeTree(tpt)
+        if (rightHandSide) {
+          vdef.symbol.pos.foreach(collectType(_, name1.length, printTypeTree(tpt)))
+        }
         rhs match {
           case Some(tree) =>
             this += " = "
-            printTree(tree)
+            if (rightHandSide) printTree(tree) else { this += "{ /* compiled code */ }"; this}
           case None =>
             this
         }
@@ -324,11 +367,14 @@
         if (!isConstructor) {
           this += ": "
           printTypeTree(tpt)
+          if (rightHandSide) {
+            ddef.symbol.pos.foreach(collectType(_, name1.length, printTypeTree(tpt)))
+          }
         }
         rhs match {
           case Some(tree) =>
             this += " = "
-            printTree(tree)
+            if (rightHandSide) printTree(tree) else { this += "{ /* compiled code */ }"; this}
           case None =>
         }
         this
@@ -337,6 +383,11 @@
         this += "_"
 
       case tree: Ident =>
+        if (rightHandSide) {
+          tree.symbol.pos.foreach(collectReference(tree.pos, _))
+          collectType(tree.pos, 0, printType(tree.tpe.widen))
+        }
+
         splicedName(tree.symbol) match {
           case Some(name) => this += highlightTypeDef(name)
           case _ => printType(tree.tpe)
@@ -361,6 +412,10 @@
 
       case tree: New =>
         this += "new "
+        if (rightHandSide) {
+          val tpt = tree.tpt
+          tpt.symbol.pos.foreach(collectReference(tpt.pos, _)) // TODO Handle more complex cases
+        }
         printType(tree.tpe)
 
       case NamedArg(name, arg) =>
@@ -1259,12 +1314,20 @@
 
     private def printAnnotation(annot: Term)(using elideThis: Option[Symbol]): this.type = {
       val Annotation(ref, args) = annot
+      val previousLength = sb.length
       this += "@"
       printTypeTree(ref)
-      if (args.isEmpty)
+      val result: this.type = if (args.isEmpty)
         this
       else
         inParens(printTrees(args, ", "))
+      if (sb.substring(previousLength).startsWith("@scala.annotation.internal.SourceFile")) {
+        sources :+= sb.substring(previousLength + 39, sb.length - 2)
+        sb.delete(previousLength, sb.length())
+      } else {
+        this += lineBreak()
+      }
+      result
     }
 
     private def printDefAnnotations(definition: Definition)(using elideThis: Option[Symbol]): this.type = {
